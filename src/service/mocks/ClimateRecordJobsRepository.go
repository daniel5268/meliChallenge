// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	meteorology "github.com/daniel5268/meliChallenge/src/domain/meteorology"
	mock "github.com/stretchr/testify/mock"
)

// ClimateRecordJobsRepository is an autogenerated mock type for the ClimateRecordJobsRepository type
type ClimateRecordJobsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: cr
func (_m *ClimateRecordJobsRepository) Create(cr ...*meteorology.ClimateRecordJob) error {
	_va := make([]interface{}, len(cr))
	for _i := range cr {
		_va[_i] = cr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*meteorology.ClimateRecordJob) error); ok {
		r0 = rf(cr...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLast provides a mock function with given fields:
func (_m *ClimateRecordJobsRepository) FindLast() (meteorology.ClimateRecordJob, error) {
	ret := _m.Called()

	var r0 meteorology.ClimateRecordJob
	if rf, ok := ret.Get(0).(func() meteorology.ClimateRecordJob); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(meteorology.ClimateRecordJob)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClimateRecordJobsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewClimateRecordJobsRepository creates a new instance of ClimateRecordJobsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClimateRecordJobsRepository(t mockConstructorTestingTNewClimateRecordJobsRepository) *ClimateRecordJobsRepository {
	mock := &ClimateRecordJobsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
