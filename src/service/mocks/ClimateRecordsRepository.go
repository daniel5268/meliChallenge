// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	meteorology "github.com/daniel5268/meliChallenge/src/domain/meteorology"
	mock "github.com/stretchr/testify/mock"
)

// ClimateRecordsRepository is an autogenerated mock type for the ClimateRecordsRepository type
type ClimateRecordsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: cr
func (_m *ClimateRecordsRepository) Create(cr ...*meteorology.ClimateRecord) error {
	_va := make([]interface{}, len(cr))
	for _i := range cr {
		_va[_i] = cr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*meteorology.ClimateRecord) error); ok {
		r0 = rf(cr...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByDay provides a mock function with given fields: day
func (_m *ClimateRecordsRepository) FindByDay(day int64) (meteorology.ClimateRecord, error) {
	ret := _m.Called(day)

	var r0 meteorology.ClimateRecord
	if rf, ok := ret.Get(0).(func(int64) meteorology.ClimateRecord); ok {
		r0 = rf(day)
	} else {
		r0 = ret.Get(0).(meteorology.ClimateRecord)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClimateRecordsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewClimateRecordsRepository creates a new instance of ClimateRecordsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClimateRecordsRepository(t mockConstructorTestingTNewClimateRecordsRepository) *ClimateRecordsRepository {
	mock := &ClimateRecordsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
